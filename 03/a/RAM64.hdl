// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

/**
    000000
    111000
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    //DMux8Way(in=load,sel=address[0..2],a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);
    DMux8Way(in=load,sel=address[0..2],a=adA,b=adB,c=adC,d=adD,e=adE,f=adF,g=adG,h=adH);
    
   RAM8(in=in,load=adA,address=address[3..5],out=ramA) ;
   RAM8(in=in,load=adB,address=address[3..5],out=ramB) ;
   RAM8(in=in,load=adC,address=address[3..5],out=ramC) ;
   RAM8(in=in,load=adD,address=address[3..5],out=ramD) ;
   RAM8(in=in,load=adE,address=address[3..5],out=ramE) ;
   RAM8(in=in,load=adF,address=address[3..5],out=ramF) ;
   RAM8(in=in,load=adG,address=address[3..5],out=ramG) ;
   RAM8(in=in,load=adH,address=address[3..5],out=ramH) ;
   Mux8Way16(a=ramA,b=ramB,c=ramC,d=ramD,e=ramE,f=ramF,g=ramG,h=ramH,sel=address[0..2],out=out);
}