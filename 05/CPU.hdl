// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    //A register
    Mux16(a=instruction,b=aluOut,sel=instruction[15],out=muxOut);

    Not(in=instruction[15],out=aInstruction);
    Or(a=aInstruction,b=instruction[5],out=aLoad);

    ARegister(in=muxOut,load=aLoad,out=aRegisterOut,out[0..14]=addressM);
    
    
    //inM
    Mux16(a=aRegisterOut,b=inM,sel=instruction[12],out=aMMuxOut);

    And(a=instruction[11],b=instruction[15],out=zx);//c1
    And(a=instruction[10],b=instruction[15],out=nx);//c2
    Or(a=instruction[9],b=aInstruction,out=zy);//c3
    Or(a=instruction[8],b=aInstruction,out=ny);//c4
    And(a=instruction[7],b=instruction[15],out=f);//c5
    And(a=instruction[6],b=instruction[15],out=no);//c6


    //ALU
    ALU(x=dRegisterOut,y=aMMuxOut,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,out=aluOut,out=outM,zr=zr,ng=ng);

    //writeM
    And(a=instruction[15],b=instruction[3],out=writeM);//d3

    //D Register
    And(a=instruction[15],b=instruction[4],out=loadD);
    DRegister(in=aluOut,load=loadD,out=dRegisterOut);
    
    
    //null
    Or(a=zr,b=ng,out=notPos);
    Not(in=notPos,out=pos);


    And(a=instruction[0],b=pos,out=jPos);
    And(a=instruction[1],b=zr,out=jZero);
    And(a=instruction[2],b=ng,out=jNeg);

    Or(a=jNeg,b=jZero,out=jC1);
    Or(a=jC1,b=jPos,out=jumpC);

    And(a=jumpC,b=instruction[15],out=jump);

    //PC
    PC(in=aRegisterOut,load=jump,inc=true,reset=reset,out[0..14]=pc);


}